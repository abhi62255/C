#include<stdio.h>
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include <sys/stat.h>
#include <stdlib.h>
#include<time.h>
#define r 3
#define c 3
char matrix[r][c];
char new[r][c];
char previous[100][r][c];
int counter=0;
int count;
char final[r][c] = {{'1','2','3'},{'8',' ','4'},{'7','6','5'}};
int i,j;
char z ;
int check,pi,check_1=0;
int p,q,x,y;
int t =0;
int result = 0;

void rules()
{
	printf("***** RULES ***** \n");
	printf("1. Valid inputs are 1,2,3,4,5,6,7,8 \n");
	printf("2. Positions adjacent to '| |' (blank position) are only positons allowed to move. \n");
	printf("3. If you enter any invalid move then it will show you previous stage. \n");
	printf("4. Initial state generated  at random by system. \n");
	printf("5. A BFS tree is  genrated while solving the puzzel with every possible move we have. \n");
	printf("6. We should not go to any previous state while solving the problem. \n");
	printf("7. If their is a repetition in BFS tree and we want to go to that state.\n");
	printf("  7.1 Then we will go to the same state which has been occured previously \n");
	printf("  7.2 It destroyes that branch we traverse back.\n");
	printf("  7.3 And continue with other possible moves.\n");
	printf("8. If we get any previous state while solving then it shows that we have made unnecessary moves. \n\n");
	
	printf("Achive FINAL STATE from INITIAL STATE. \n");
	printf("FINAL STATE :  \n|1||2||3|\n|8|| ||4|\n|7||6||5|\n\nINITIAL STATE : \n");
}
void load()
{
	for(i=0;i<3;i++)
	{
		for(j=0;j<3;j++)
		{
			if(new[i][j] == '0')
			{
				matrix[i][j]= ' ';
				continue;
			}
			matrix[i][j]= new[i][j];
		}
	}
}
void blank()
{
	for(i=0;i<3;i++)
	{
		for(j=0;j<3;j++)
		{
			new[i][j]= ' ';
		}
	}
}
int main()
{
	
	time_t T= time(NULL);
	struct tm tm = *localtime(&T);
	char f[4];
	int rsl ;
	int random,t;
	int randvalues[9];
	main:
	system("cls");       
	rules();                        //rules
	count = 0;
	blank();
	T= time(NULL);
	tm = *localtime(&T);
	srand(tm.tm_sec);
	while(count!=9)
	{
		rsl=rand()%9;
		sprintf(f,"%d",rsl);
		for(i=0;i<r;i++)
		{
			for(j=0;j<c;j++)
			{
				if((new[i][j]) == f[0])
				{
					i = 4; j = 4;
					continue;
				}else if((new[i][j]) == ' ')
				{
					new[i][j] = f[0];
					i = 4; j = 4;
					count++;
				}
			}
		}
	}
	load();
	for(i=0;i<r;i++)
	{
		for(j=0;j<c;j++)
		{
			printf("|%c|",matrix[i][j]);
			previous[counter][i][j]=matrix[i][j];
			counter++;
			
		}
		printf("\n");
	}
	while(1)
	{
		printf("Enter value to change its position to blank space. (1,2,3,4,5,6,7,8 use adjacent positons only)\n");
		scanf(" %c",&z);
		if(z=='q')
		{
			printf("\n*****You Quit*****\n");
			goto main;
			// break;
		}
		for(i=0;i<r;i++)
		{
			for(j=0;j<c;j++)
			{
			if((matrix[i][j])== z)
			{
				p = i;
				q = j;
			}else if((matrix[i][j])== ' ')
			{
				x = i;
				y = j;
			}
			}
		}
		t =0;
		int m , n ;
		m = p - 1;
		n = q ;
		if(m>=0)
		{
		if((matrix[m][n])== ' ')t=1;
		}
		m = p + 1;
		if(m<=2)
		{
		if((matrix[m][n])== ' ')t=1;
		}
		m = p;
		n = q - 1 ;
		if(n>=0)
		{
		if((matrix[m][n])== ' ')t=1;
		}
		n = q + 1 ;
		if(n<=2)
		{
		if((matrix[m][n])== ' ')t=1;
		}
		if(t==1)
		{
		matrix[x][y] = z;
		matrix[p][q] = ' ';
		}
		t = 0;
		for(i=0;i<r;i++)
		{
			for(j=0;j<c;j++)
			{
				if((matrix[i][j])== final[i][j])
				{
					t++;
				}
			}
		}
		
		
		//previous stages
		if(counter>=0){
			for(pi=0,check=0;pi<counter;pi++){
				for(i=0;i<r;i++)
				{
					for(j=0;j<c;j++)
					{
						if(matrix[i][j]==previous[pi][i][j])
						{
						//	printf("     %c      %c     ",matrix[i][j],previous[pi][i][j]);
							check++;
						}
					}
				}
				if(check==9)
				{
					check_1=1;
				}
				check=0;
			}
		}
		if(check_1==1)
		{
			printf("\n****One of the previous stages****\n");
			check_1=0;	
		}
		
		for(i=0;i<r;i++)
		{
			for(j=0;j<c;j++)
			{
				previous[counter][i][j]=matrix[i][j];
				
			}
		}
		counter++;
		
		
			
		
		for(i=0;i<r;i++)
		{
			for(j=0;j<c;j++)
			{
				printf("|%c|",matrix[i][j]);
			}
			printf("\n");
		}
		if(t==9)
		{
			printf("\n****you Win****\n");
			break;
		}
	}
	return 1;
}
